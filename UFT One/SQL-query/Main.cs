/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘SQL-query.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.Sequence9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence9");
            _flow.DbOpenConnection4 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection4");
            _flow.DbFetchData6 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData6");
            _flow.Loop8 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop8Input>(_context,"Loop8",LoopType.For);
            _flow.DbCloseConnection5 = new HP.ST.Ext.DatabaseRunTime.DbCloseConnection(_context,"DbCloseConnection5");
            _flow.Sequence10 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence10");
            _flow.ReportMessageActivity7 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity7");
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence9);
            this.Activities.Add (_flow.Loop2);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.Sequence9.Comment = @"";
            _flow.Sequence9.IconPath = @"";
            _flow.Sequence9.Name = @"Sequence9";
            _flow.Sequence9.Activities.Add (_flow.DbOpenConnection4);
            _flow.Sequence9.Activities.Add (_flow.DbFetchData6);
            _flow.Sequence9.Activities.Add (_flow.Loop8);
            _flow.Sequence9.Activities.Add (_flow.DbCloseConnection5);
            _flow.DbOpenConnection4.ConnectionString = @"Provider=SQLOLEDB;Password={PWD};Persist Security Info=True;User ID=sa;Initial Catalog=default_alm_academy_db;Data Source=192.168.5.138;";
            _flow.DbOpenConnection4.Password = @"qez5j6SGWIyM3WLuMiR+9A==";
            _flow.DbOpenConnection4.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.OLE;
            _flow.DbOpenConnection4.Comment = @"";
            _flow.DbOpenConnection4.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection4.Name = @"Open Connection4";
            _flow.DbFetchData6.QueryString = @"SELECT ""td"".""TEST"".""TS_TEST_VERSION"", ""td"".""TEST"".""TS_TEST_ID"", ""td"".""TEST"".""TS_NAME"", ""td"".""TEST"".""TS_STEPS"", ""td"".""TEST"".""TS_PATH"", ""td"".""TEST"".""TS_SUBJECT"", ""td"".""TEST"".""TS_ORDER_ID"", ""td"".""TEST"".""TS_STATUS"", ""td"".""TEST"".""TS_RESPONSIBLE"", ""td"".""TEST"".""TS_CREATION_DATE"", ""td"".""TEST"".""TS_DESCRIPTION"", ""td"".""TEST"".""TS_TYPE"", ""td"".""TEST"".""TS_TIMEOUT"", ""td"".""TEST"".""TS_ATTACHMENT"", ""td"".""TEST"".""TS_RUNTIME_DATA"", ""td"".""TEST"".""TS_WORKING_MODE"", ""td"".""TEST"".""TS_PROTOCOL_TYPE"", ""td"".""TEST"".""TS_SERVICE_TEST_MODE"", ""td"".""TEST"".""TS_USER_01"", ""td"".""TEST"".""TS_USER_02"", ""td"".""TEST"".""TS_USER_03"", ""td"".""TEST"".""TS_USER_04"", ""td"".""TEST"".""TS_USER_05"", ""td"".""TEST"".""TS_USER_06"", ""td"".""TEST"".""TS_USER_07"", ""td"".""TEST"".""TS_USER_08"", ""td"".""TEST"".""TS_USER_09"", ""td"".""TEST"".""TS_USER_10"", ""td"".""TEST"".""TS_USER_11"", ""td"".""TEST"".""TS_USER_12"", ""td"".""TEST"".""TS_USER_HR_01"", ""td"".""TEST"".""TS_USER_HR_02"", ""td"".""TEST"".""TS_USER_HR_03"", ""td"".""TEST"".""TS_USER_HR_04"", ""td"".""TEST"".""TS_USER_HR_05"", ""td"".""TEST"".""TS_USER_HR_06"", ""td"".""TEST"".""TS_ESTIMATE_DEVTIME"", ""td"".""TEST"".""TS_TEST_VER_STAMP"", ""td"".""TEST"".""TS_EXEC_STATUS"", ""td"".""TEST"".""TS_TEMPLATE"", ""td"".""TEST"".""TS_STEP_PARAM"", ""td"".""TEST"".""TS_VTS"", ""td"".""TEST"".""TS_VC_CUR_VER"", ""td"".""TEST"".""TS_USER_13"", ""td"".""TEST"".""TS_USER_14"", ""td"".""TEST"".""TS_USER_15"", ""td"".""TEST"".""TS_USER_16"", ""td"".""TEST"".""TS_USER_17"", ""td"".""TEST"".""TS_USER_18"", ""td"".""TEST"".""TS_USER_19"", ""td"".""TEST"".""TS_USER_20"", ""td"".""TEST"".""TS_USER_21"", ""td"".""TEST"".""TS_USER_22"", ""td"".""TEST"".""TS_USER_23"", ""td"".""TEST"".""TS_USER_24"", ""td"".""TEST"".""TS_TEXT_SYNC"", ""td"".""TEST"".""TS_DEV_COMMENTS"", ""td"".""TEST"".""TS_VC_USER_NAME"", ""td"".""TEST"".""TS_VC_DATE"", ""td"".""TEST"".""TS_VC_TIME"", ""td"".""TEST"".""TS_VC_COMMENTS"", ""td"".""TEST"".""TS_VC_CHECKIN_USER_NAME"", ""td"".""TEST"".""TS_VC_CHECKIN_DATE"", ""td"".""TEST"".""TS_VC_CHECKIN_TIME"", ""td"".""TEST"".""TS_VC_CHECKIN_COMMENTS"", ""td"".""TEST"".""TS_VC_STATUS"", ""td"".""TEST"".""TS_VC_START_AUDIT_ACTION_ID"", ""td"".""TEST"".""TS_VC_END_AUDIT_ACTION_ID"", ""td"".""TEST"".""TS_VC_VERSION_NUMBER"", ""td"".""TEST"".""TS_BPTA_CHANGE_DETECTED"", ""td"".""TEST"".""TS_BASE_TEST_ID"", ""td"".""TEST"".""TS_UT_PACKAGE_NAME"", ""td"".""TEST"".""TS_UT_CLASS_NAME"", ""td"".""TEST"".""TS_UT_METHOD_NAME"", ""td"".""TEST"".""TS_TESTING_FRAMEWORK"", ""td"".""TEST"".""TS_TESTING_TOOL"" FROM ""td"".""TEST""";
            _flow.DbFetchData6.Timeout = (int)30;
            _flow.DbFetchData6.Comment = @"";
            _flow.DbFetchData6.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData6.Name = @"Select Data6";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            bind_dir4 = new BindDirection(_flow.DbOpenConnection4,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DbFetchData6.InDirections.Add(bind_dir4);
            XmlDocument DbFetchData6_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData6_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><TS_TEST_VERSION /><TS_TEST_ID /><TS_NAME /><TS_STEPS /><TS_PATH /><TS_SUBJECT /><TS_ORDER_ID /><TS_STATUS /><TS_RESPONSIBLE /><TS_CREATION_DATE /><TS_DESCRIPTION /><TS_TYPE /><TS_TIMEOUT /><TS_ATTACHMENT /><TS_RUNTIME_DATA /><TS_WORKING_MODE /><TS_PROTOCOL_TYPE /><TS_SERVICE_TEST_MODE /><TS_USER_01 /><TS_USER_02 /><TS_USER_03 /><TS_USER_04 /><TS_USER_05 /><TS_USER_06 /><TS_USER_07 /><TS_USER_08 /><TS_USER_09 /><TS_USER_10 /><TS_USER_11 /><TS_USER_12 /><TS_USER_HR_01 /><TS_USER_HR_02 /><TS_USER_HR_03 /><TS_USER_HR_04 /><TS_USER_HR_05 /><TS_USER_HR_06 /><TS_ESTIMATE_DEVTIME /><TS_TEST_VER_STAMP /><TS_EXEC_STATUS /><TS_TEMPLATE /><TS_STEP_PARAM /><TS_VTS /><TS_VC_CUR_VER /><TS_USER_13 /><TS_USER_14 /><TS_USER_15 /><TS_USER_16 /><TS_USER_17 /><TS_USER_18 /><TS_USER_19 /><TS_USER_20 /><TS_USER_21 /><TS_USER_22 /><TS_USER_23 /><TS_USER_24 /><TS_TEXT_SYNC /><TS_DEV_COMMENTS /><TS_VC_USER_NAME /><TS_VC_DATE /><TS_VC_TIME /><TS_VC_COMMENTS /><TS_VC_CHECKIN_USER_NAME /><TS_VC_CHECKIN_DATE /><TS_VC_CHECKIN_TIME /><TS_VC_CHECKIN_COMMENTS /><TS_VC_STATUS /><TS_VC_START_AUDIT_ACTION_ID /><TS_VC_END_AUDIT_ACTION_ID /><TS_VC_VERSION_NUMBER /><TS_BPTA_CHANGE_DETECTED /><TS_BASE_TEST_ID /><TS_UT_PACKAGE_NAME /><TS_UT_CLASS_NAME /><TS_UT_METHOD_NAME /><TS_TESTING_FRAMEWORK /><TS_TESTING_TOOL /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData6.ExpectedOutputProperties = DbFetchData6_ExpectedOutputProperties_Document;
            _flow.Loop8.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop8.NumberOfIterations = (int)1;
            _flow.Loop8.Comment = @"";
            _flow.Loop8.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop8.Name = @"Loop8";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutputProperties","count(/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'])");
            VTDBaseGetter binding_getter5 = new VTDXPathGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            bind_dir5 = new BindDirection(_flow.DbFetchData6,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.Loop8.InDirections.Add(bind_dir5);
            _flow.Loop8.Activities.Add (_flow.Sequence10);
            _flow.DbCloseConnection5.Comment = @"";
            _flow.DbCloseConnection5.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_close_connection.png";
            _flow.DbCloseConnection5.Name = @"Close Connection5";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            bind_dir6 = new BindDirection(_flow.DbOpenConnection4,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.DbCloseConnection5.InDirections.Add(bind_dir6);
            _flow.Sequence10.Comment = @"";
            _flow.Sequence10.IconPath = @"";
            _flow.Sequence10.Name = @"Sequence10";
            _flow.Sequence10.Activities.Add (_flow.ReportMessageActivity7);
            _flow.ReportMessageActivity7.Status = @"Done";
            _flow.ReportMessageActivity7.Message = @"{Step.OutputProperties.DbFetchData6.ResultTable.Row[{Step.OutputProperties.Loop8.CurrentIterationNumber}].TS_NAME}";
            _flow.ReportMessageActivity7.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity7.Comment = @"";
            _flow.ReportMessageActivity7.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity7.Name = @"Report Testname";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='TS_NAME'][1]");
            VTDBaseGetter binding_getter8 = new VTDXPathGetter(pi14,XmlTypeCode.String);
            binding_getter8 = new XPathGetterDecorator(binding_getter8,"{Array0}",binding_getter7,_flow.Loop8);
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("Message");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi15);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.OutputProperties.DbFetchData6.ResultTable.Row[{Step.OutputProperties.Loop8.CurrentIterationNumber}].TS_NAME}");
            bind_dir7 = new BindDirection(_flow.DbFetchData6,binding_getter8,binding_setter7,BindTargetType.ToInProperty);
            _flow.ReportMessageActivity7.InDirections.Add(bind_dir7);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    